import re
inputDirectory = 'src/constants/'
outputDirectory = 'src-tauri/src/autogen/'
inputFileList = ['events.ts', 'global.ts']
outputFile = 'constants.rs'

finalOutput = '#![allow(non_camel_case_types)]\n\n// Autogenerated file do not edit !!!!!\n\n'

expressionList = {
    # 'enum': r"(enum\s+\w+\s+\{[^}]*\})",
    # 'const': "(const.*?})"
    'enum': r"enum (\w+) \{([^}]+)\}",
    'const': r"const (\w+): \{([^}]+)\} = \{([^}]+)\};"
}

def enumParse(matches):
    rust_code = ""
    for enum_name, enum_body in matches:
        enum_items = [item.strip() for item in enum_body.split(",") if item.strip()]
        rust_code += f"pub enum {enum_name} {{\n"
        for i, item in enumerate(enum_items):
            rust_code += f"    {item.split('=')[0].strip()} = {i},\n"
        rust_code += "}\n\n"

        # Implement From<u32> for the enum
        rust_code += f"impl From<u32> for {enum_name} {{\n"
        rust_code += "    fn from(item: u32) -> Self {\n"
        rust_code += "        match item {\n"
        for i, item in enumerate(enum_items):
            rust_code += f"            {i} => {enum_name}::{item.split('=')[0].strip()},\n"
        rust_code += f"            _ => panic!(\"Not a valid value for the enum {enum_name}\"),\n"
        rust_code += "        }\n"
        rust_code += "    }\n"
        rust_code += "}\n\n"

        # Implement Into<u32> for the enum
        rust_code += f"impl Into<u32> for {enum_name} {{\n"
        rust_code += "    fn into(self) -> u32 {\n"
        rust_code += "        match self {\n"
        for i, item in enumerate(enum_items):
            rust_code += f"            {enum_name}::{item.split('=')[0].strip()} => {i},\n"
        rust_code += "        }\n"
        rust_code += "    }\n"
        rust_code += "}\n\n"

    return rust_code

def constParse(matches):
    rust_code = ""
    for match in matches:
        const_name, const_types, const_values = match
        types = re.findall(r"(\w+): (\w+);", const_types)
        values = re.findall(r"(\w+): \"?([^\",]+)\"?,?", const_values)

        for (name, _type), (_, value) in zip(types, values):
            rust_type = {
                "string": "&str",
                "bool": "bool",
                "number": "i32",
            }.get(_type, "&str")  # Default to &str if type is not recognized

            rust_code += f"pub const {name.upper()}: {rust_type} = "
            if rust_type == "&str":
                rust_code += f"\"{value}\";\n"
            else:
                rust_code += f"{value};\n"

    return rust_code


for inputFile in inputFileList:
    with open(inputDirectory+inputFile, 'r') as file:
        contents = file.read()
        for key in expressionList:
            matches = re.findall(expressionList[key], contents)
            if key == 'enum':
                finalOutput += enumParse(matches)
            if key == 'const':
                finalOutput += constParse(matches)

print(finalOutput)

with open(outputDirectory+outputFile, 'w') as file:
    file.write(finalOutput)
